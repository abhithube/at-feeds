// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: entries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries(link, title, published_at, author, content, thumbnail_url)
  VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (link)
  DO UPDATE SET
    title = excluded.title, published_at = excluded.published_at, author = excluded.author, content = excluded.content, thumbnail_url = excluded.thumbnail_url
  RETURNING
    id, link, title, published_at, author, content, thumbnail_url
`

type CreateEntryParams struct {
	Link         string
	Title        string
	PublishedAt  pgtype.Timestamptz
	Author       pgtype.Text
	Content      pgtype.Text
	ThumbnailUrl pgtype.Text
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRow(ctx, createEntry,
		arg.Link,
		arg.Title,
		arg.PublishedAt,
		arg.Author,
		arg.Content,
		arg.ThumbnailUrl,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Title,
		&i.PublishedAt,
		&i.Author,
		&i.Content,
		&i.ThumbnailUrl,
	)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT
  id, link, title, published_at, author, content, thumbnail_url
FROM
  entries
WHERE
  id = $1
`

func (q *Queries) GetEntry(ctx context.Context, id int32) (Entry, error) {
	row := q.db.QueryRow(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Title,
		&i.PublishedAt,
		&i.Author,
		&i.Content,
		&i.ThumbnailUrl,
	)
	return i, err
}
