// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: collections.sql

package database

import (
	"context"
	"database/sql"
)

const countCollections = `-- name: CountCollections :one
SELECT
  COUNT(*) AS count
FROM
  collections
WHERE
  CASE WHEN ?1 THEN
    parent_id = ?2
  ELSE
    TRUE
  END
`

type CountCollectionsParams struct {
	FilterByParentID interface{}
	ParentID         sql.NullInt64
}

func (q *Queries) CountCollections(ctx context.Context, arg CountCollectionsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCollections, arg.FilterByParentID, arg.ParentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections
WHERE id = ?1
`

func (q *Queries) DeleteCollection(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCollection, id)
	return err
}

const insertCollection = `-- name: InsertCollection :one
INSERT INTO collections(title, parent_id)
  VALUES (?1, ?2)
ON CONFLICT (title)
  DO NOTHING
RETURNING
  id, title, parent_id
`

type InsertCollectionParams struct {
	Title    string
	ParentID sql.NullInt64
}

func (q *Queries) InsertCollection(ctx context.Context, arg InsertCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, insertCollection, arg.Title, arg.ParentID)
	var i Collection
	err := row.Scan(&i.ID, &i.Title, &i.ParentID)
	return i, err
}

const listCollections = `-- name: ListCollections :many
SELECT
  id, title, parent_id
FROM
  collections
WHERE
  CASE WHEN ?1 THEN
    parent_id = ?2
  ELSE
    TRUE
  END
ORDER BY
  title ASC
LIMIT ?4 OFFSET ?3
`

type ListCollectionsParams struct {
	FilterByParentID interface{}
	ParentID         sql.NullInt64
	Offset           int64
	Limit            int64
}

func (q *Queries) ListCollections(ctx context.Context, arg ListCollectionsParams) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, listCollections,
		arg.FilterByParentID,
		arg.ParentID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.Title, &i.ParentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
