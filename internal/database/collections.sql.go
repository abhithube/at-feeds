// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: collections.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections
WHERE id = $1
`

func (q *Queries) DeleteCollection(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCollection, id)
	return err
}

const getCollection = `-- name: GetCollection :one
SELECT
  id, title
FROM
  collections
WHERE
  id = $1
`

func (q *Queries) GetCollection(ctx context.Context, id int32) (Collection, error) {
	row := q.db.QueryRow(ctx, getCollection, id)
	var i Collection
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const insertCollection = `-- name: InsertCollection :one
INSERT INTO collections(title)
  VALUES ($1)
RETURNING
  id, title
`

func (q *Queries) InsertCollection(ctx context.Context, title string) (Collection, error) {
	row := q.db.QueryRow(ctx, insertCollection, title)
	var i Collection
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const listCollections = `-- name: ListCollections :many
SELECT
  id, title,
  count(*) OVER () AS total_count
FROM
  collections
ORDER BY
  title ASC
LIMIT $2 OFFSET $1
`

type ListCollectionsParams struct {
	Offset int32
	Limit  pgtype.Int4
}

type ListCollectionsRow struct {
	ID         int32
	Title      string
	TotalCount int64
}

func (q *Queries) ListCollections(ctx context.Context, arg ListCollectionsParams) ([]ListCollectionsRow, error) {
	rows, err := q.db.Query(ctx, listCollections, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCollectionsRow
	for rows.Next() {
		var i ListCollectionsRow
		if err := rows.Scan(&i.ID, &i.Title, &i.TotalCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
